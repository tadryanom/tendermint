(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{750:function(e,t,o){"use strict";o.r(t);var s=o(1),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"application-requirements"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#application-requirements"}},[e._v("#")]),e._v(" Application Requirements")]),e._v(" "),o("p",[e._v("This section specifies what Tendermint expects from the Application. It is structured as a set\nof formal requirements that can be used for testing and verification of the Application's logic.")]),e._v(" "),o("p",[e._v("Let "),o("em",[e._v("p")]),e._v(" and "),o("em",[e._v("q")]),e._v(" be two different correct proposers in rounds "),o("em",[e._v("r"),o("sub",[e._v("p")])]),e._v(" and "),o("em",[e._v("r"),o("sub",[e._v("q")])]),e._v("\nrespectively, in height "),o("em",[e._v("h")]),e._v(".\nLet "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(" be "),o("em",[e._v("p")]),e._v("'s Application's state committed for height "),o("em",[e._v("h-1")]),e._v(".\nLet "),o("em",[e._v("v"),o("sub",[e._v("p")])]),e._v(" (resp. "),o("em",[e._v("v"),o("sub",[e._v("q")])]),e._v(") be the block that "),o("em",[e._v("p")]),e._v("'s (resp. "),o("em",[e._v("q")]),e._v("'s) Tendermint passes\non to the Application\nvia "),o("code",[e._v("RequestPrepareProposal")]),e._v(" as proposer of round "),o("em",[e._v("r"),o("sub",[e._v("p")])]),e._v(" (resp "),o("em",[e._v("r"),o("sub",[e._v("q")])]),e._v("), height "),o("em",[e._v("h")]),e._v(",\nalso known as the raw proposal.\nLet "),o("em",[e._v("v'"),o("sub",[e._v("p")])]),e._v(" (resp. "),o("em",[e._v("v'"),o("sub",[e._v("q")])]),e._v(") the possibly modified block "),o("em",[e._v("p")]),e._v("'s (resp. "),o("em",[e._v("q")]),e._v("'s) Application\nreturns via "),o("code",[e._v("ResponsePrepareProposal")]),e._v(" to Tendermint, also known as the prepared proposal.")]),e._v(" "),o("p",[e._v("Process "),o("em",[e._v("p")]),e._v("'s prepared proposal can differ in two different rounds where "),o("em",[e._v("p")]),e._v(" is the proposer.")]),e._v(" "),o("ul",[o("li",[e._v("Requirement 1 ["),o("code",[e._v("PrepareProposal")]),e._v(", header-changes]: When the blockchain is in same-block execution mode,\n"),o("em",[e._v("p")]),e._v("'s Application provides values for the following parameters in "),o("code",[e._v("ResponsePrepareProposal")]),e._v(":\n"),o("code",[e._v("AppHash")]),e._v(", "),o("code",[e._v("TxResults")]),e._v(", "),o("code",[e._v("ConsensusParams")]),e._v(", "),o("code",[e._v("ValidatorUpdates")]),e._v(". Provided values for\n"),o("code",[e._v("ConsensusParams")]),e._v(" and "),o("code",[e._v("ValidatorUpdates")]),e._v(" MAY be empty to denote that the Application\nwishes to keep the current values.")])]),e._v(" "),o("p",[e._v("Parameters "),o("code",[e._v("AppHash")]),e._v(", "),o("code",[e._v("TxResults")]),e._v(", "),o("code",[e._v("ConsensusParams")]),e._v(", and "),o("code",[e._v("ValidatorUpdates")]),e._v(" are used by Tendermint to\ncompute various hashes in the block header that will finally be part of the proposal.")]),e._v(" "),o("ul",[o("li",[e._v("Requirement 2 ["),o("code",[e._v("PrepareProposal")]),e._v(", no-header-changes]: When the blockchain is in next-block execution\nmode, "),o("em",[e._v("p")]),e._v("'s Application does not provide values for the following parameters in "),o("code",[e._v("ResponsePrepareProposal")]),e._v(":\n"),o("code",[e._v("AppHash")]),e._v(", "),o("code",[e._v("TxResults")]),e._v(", "),o("code",[e._v("ConsensusParams")]),e._v(", "),o("code",[e._v("ValidatorUpdates")]),e._v(".")])]),e._v(" "),o("p",[e._v("In practical terms, Requirements 1 and 2 imply that Tendermint will (a) panic if the Application is in\nsame-block execution mode and "),o("em",[e._v("does not")]),e._v(" provide values for\n"),o("code",[e._v("AppHash")]),e._v(", "),o("code",[e._v("TxResults")]),e._v(", "),o("code",[e._v("ConsensusParams")]),e._v(", and "),o("code",[e._v("ValidatorUpdates")]),e._v(", or\n(b) log an error if the Application is in next-block execution mode and "),o("em",[e._v("does")]),e._v(" provide values for\n"),o("code",[e._v("AppHash")]),e._v(", "),o("code",[e._v("TxResults")]),e._v(", "),o("code",[e._v("ConsensusParams")]),e._v(", or "),o("code",[e._v("ValidatorUpdates")]),e._v(" (the values provided will be ignored).")]),e._v(" "),o("ul",[o("li",[e._v("Requirement 3 ["),o("code",[e._v("PrepareProposal")]),e._v(", timeliness]: If "),o("em",[e._v("p")]),e._v("'s Application fully executes prepared blocks in\n"),o("code",[e._v("PrepareProposal")]),e._v(" and the network is in a synchronous period while processes "),o("em",[e._v("p")]),e._v(" and "),o("em",[e._v("q")]),e._v(" are in "),o("em",[e._v("r"),o("sub",[e._v("p")])]),e._v(",\nthen the value of "),o("em",[e._v("TimeoutPropose")]),e._v(" at "),o("em",[e._v("q")]),e._v(" must be such that "),o("em",[e._v("q")]),e._v("'s propose timer does not time out\n(which would result in "),o("em",[e._v("q")]),e._v(" prevoting "),o("code",[e._v("nil")]),e._v(" in "),o("em",[e._v("r"),o("sub",[e._v("p")])]),e._v(").")])]),e._v(" "),o("p",[e._v("Full execution of blocks at "),o("code",[e._v("PrepareProposal")]),e._v(" time stands on Tendermint's critical path. Thus,\nRequirement 3 ensures the Application will set a value for "),o("code",[e._v("TimeoutPropose")]),e._v(" such that the time it takes\nto fully execute blocks in "),o("code",[e._v("PrepareProposal")]),e._v(" does not interfere with Tendermint's propose timer.")]),e._v(" "),o("ul",[o("li",[e._v("Requirement 4 ["),o("code",[e._v("PrepareProposal")]),e._v(", tx-size]: When "),o("em",[e._v("p")]),e._v("'s Application calls "),o("code",[e._v("ResponsePrepareProposal")]),e._v(", the\ntotal size in bytes of the transactions returned does not exceed "),o("code",[e._v("RequestPrepareProposal.max_tx_bytes")]),e._v(".")])]),e._v(" "),o("p",[e._v("Busy blockchains might seek to maximize the amount of transactions included in each block. Under those conditions,\nTendermint might choose to increase the transactions passed to the Application via "),o("code",[e._v("RequestPrepareProposal.txs")]),e._v("\nbeyond the "),o("code",[e._v("RequestPrepareProposal.max_tx_bytes")]),e._v(" limit. The idea is that, if the Application drops some of\nthose transactions, it can still return a transaction list whose byte size is as close to\n"),o("code",[e._v("RequestPrepareProposal.max_tx_bytes")]),e._v(" as possible. Thus, Requirement 4 ensures that the size in bytes of the\ntransaction list returned by the application will never cause the resulting block to go beyond its byte size\nlimit.")]),e._v(" "),o("ul",[o("li",[e._v("Requirement 5 ["),o("code",[e._v("PrepareProposal")]),e._v(", "),o("code",[e._v("ProcessProposal")]),e._v(", coherence]: For any two correct processes "),o("em",[e._v("p")]),e._v(" and "),o("em",[e._v("q")]),e._v(",\nif "),o("em",[e._v("q")]),e._v("'s Tendermint calls "),o("code",[e._v("RequestProcessProposal")]),e._v(" on "),o("em",[e._v("v'"),o("sub",[e._v("p")])]),e._v(",\n"),o("em",[e._v("q")]),e._v("'s Application returns Accept in "),o("code",[e._v("ResponseProcessProposal")]),e._v(".")])]),e._v(" "),o("p",[e._v("Requirement 5 makes sure that blocks proposed by correct processes "),o("em",[e._v("always")]),e._v(" pass the correct receiving process's\n"),o("code",[e._v("ProcessProposal")]),e._v(" check.\nOn the other hand, if there is a deterministic bug in "),o("code",[e._v("PrepareProposal")]),e._v(" or "),o("code",[e._v("ProcessProposal")]),e._v(" (or in both),\nstrictly speaking, this makes all processes that hit the bug byzantine. This is a problem in practice,\nas very often validators are running the Application from the same codebase, so potentially "),o("em",[e._v("all")]),e._v(" would\nlikely hit the bug at the same time. This would result in most (or all) processes prevoting "),o("code",[e._v("nil")]),e._v(", with the\nserious consequences on Tendermint's liveness that this entails. Due to its criticality, Requirement 5 is a\ntarget for extensive testing and automated verification.")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Requirement 6 ["),o("code",[e._v("ProcessProposal")]),e._v(", determinism-1]: "),o("code",[e._v("ProcessProposal")]),e._v(" is a (deterministic) function of the current\nstate and the block that is about to be applied. In other words, for any correct process "),o("em",[e._v("p")]),e._v(", and any arbitrary block "),o("em",[e._v("v'")]),e._v(",\nif "),o("em",[e._v("p")]),e._v("'s Tendermint calls "),o("code",[e._v("RequestProcessProposal")]),e._v(" on "),o("em",[e._v("v'")]),e._v(" at height "),o("em",[e._v("h")]),e._v(",\nthen "),o("em",[e._v("p")]),e._v("'s Application's acceptance or rejection "),o("strong",[e._v("exclusively")]),e._v(" depends on "),o("em",[e._v("v'")]),e._v(" and "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Requirement 7 ["),o("code",[e._v("ProcessProposal")]),e._v(", determinism-2]: For any two correct processes "),o("em",[e._v("p")]),e._v(" and "),o("em",[e._v("q")]),e._v(", and any arbitrary\nblock "),o("em",[e._v("v'")]),e._v(",\nif "),o("em",[e._v("p")]),e._v("'s (resp. "),o("em",[e._v("q")]),e._v("'s) Tendermint calls "),o("code",[e._v("RequestProcessProposal")]),e._v(" on "),o("em",[e._v("v'")]),e._v(" at height "),o("em",[e._v("h")]),e._v(",\nthen "),o("em",[e._v("p")]),e._v("'s Application accepts "),o("em",[e._v("v'")]),e._v(" if and only if "),o("em",[e._v("q")]),e._v("'s Application accepts "),o("em",[e._v("v'")]),e._v(".\nNote that this requirement follows from Requirement 6 and the Agreement property of consensus.")])])]),e._v(" "),o("p",[e._v("Requirements 6 and 7 ensure that all correct processes will react in the same way to a proposed block, even\nif the proposer is Byzantine. However, "),o("code",[e._v("ProcessProposal")]),e._v(" may contain a bug that renders the\nacceptance or rejection of the block non-deterministic, and therefore prevents processes hitting\nthe bug from fulfilling Requirements 6 or 7 (effectively making those processes Byzantine).\nIn such a scenario, Tendermint's liveness cannot be guaranteed.\nAgain, this is a problem in practice if most validators are running the same software, as they are likely\nto hit the bug at the same point. There is currently no clear solution to help with this situation, so\nthe Application designers/implementors must proceed very carefully with the logic/implementation\nof "),o("code",[e._v("ProcessProposal")]),e._v(". As a general rule "),o("code",[e._v("ProcessProposal")]),e._v(" SHOULD always accept the block.")]),e._v(" "),o("p",[e._v("According to the Tendermint algorithm, a correct process can broadcast at most one precommit\nmessage in round "),o("em",[e._v("r")]),e._v(", height "),o("em",[e._v("h")]),e._v(".\nSince, as stated in the "),o("RouterLink",{attrs:{to:"/spec/abci++/abci++_methods_002_draft.html#extendvote"}},[e._v("Methods")]),e._v(" section, "),o("code",[e._v("ResponseExtendVote")]),e._v("\nis only called when Tendermint\nis about to broadcast a non-"),o("code",[e._v("nil")]),e._v(" precommit message, a correct process can only produce one vote extension\nin round "),o("em",[e._v("r")]),e._v(", height "),o("em",[e._v("h")]),e._v(".\nLet "),o("em",[e._v("e"),o("sup",[e._v("r")]),o("sub",[e._v("p")])]),e._v(" be the vote extension that the Application of a correct process "),o("em",[e._v("p")]),e._v(" returns via\n"),o("code",[e._v("ResponseExtendVote")]),e._v(" in round "),o("em",[e._v("r")]),e._v(", height "),o("em",[e._v("h")]),e._v(".\nLet "),o("em",[e._v("w"),o("sup",[e._v("r")]),o("sub",[e._v("p")])]),e._v(" be the proposed block that "),o("em",[e._v("p")]),e._v("'s Tendermint passes to the Application via "),o("code",[e._v("RequestExtendVote")]),e._v("\nin round "),o("em",[e._v("r")]),e._v(", height "),o("em",[e._v("h")]),e._v(".")],1),e._v(" "),o("ul",[o("li",[e._v("Requirement 8 ["),o("code",[e._v("ExtendVote")]),e._v(", "),o("code",[e._v("VerifyVoteExtension")]),e._v(", coherence]: For any two correct processes "),o("em",[e._v("p")]),e._v(" and "),o("em",[e._v("q")]),e._v(", if "),o("em",[e._v("q")]),e._v("\nreceives "),o("em",[e._v("e"),o("sup",[e._v("r")]),o("sub",[e._v("p")])]),e._v("\nfrom "),o("em",[e._v("p")]),e._v(" in height "),o("em",[e._v("h")]),e._v(", "),o("em",[e._v("q")]),e._v("'s Application returns Accept in "),o("code",[e._v("ResponseVerifyVoteExtension")]),e._v(".")])]),e._v(" "),o("p",[e._v("Requirement 8 constrains the creation and handling of vote extensions in a similar way as Requirement 5\nconstrains the creation and handling of proposed blocks.\nRequirement 8 ensures that extensions created by correct processes "),o("em",[e._v("always")]),e._v(" pass the "),o("code",[e._v("VerifyVoteExtension")]),e._v("\nchecks performed by correct processes receiving those extensions.\nHowever, if there is a (deterministic) bug in "),o("code",[e._v("ExtendVote")]),e._v(" or "),o("code",[e._v("VerifyVoteExtension")]),e._v(" (or in both),\nwe will face the same liveness issues as described for Requirement 5, as Precommit messages with invalid vote\nextensions will be discarded.")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Requirement 9 ["),o("code",[e._v("VerifyVoteExtension")]),e._v(", determinism-1]: "),o("code",[e._v("VerifyVoteExtension")]),e._v(" is a (deterministic) function of\nthe current state, the vote extension received, and the prepared proposal that the extension refers to.\nIn other words, for any correct process "),o("em",[e._v("p")]),e._v(", and any arbitrary vote extension "),o("em",[e._v("e")]),e._v(", and any arbitrary\nblock "),o("em",[e._v("w")]),e._v(", if "),o("em",[e._v("p")]),e._v("'s (resp. "),o("em",[e._v("q")]),e._v("'s) Tendermint calls "),o("code",[e._v("RequestVerifyVoteExtension")]),e._v(" on "),o("em",[e._v("e")]),e._v(" and "),o("em",[e._v("w")]),e._v(" at height "),o("em",[e._v("h")]),e._v(",\nthen "),o("em",[e._v("p")]),e._v("'s Application's acceptance or rejection "),o("strong",[e._v("exclusively")]),e._v(" depends on "),o("em",[e._v("e")]),e._v(", "),o("em",[e._v("w")]),e._v(" and "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Requirement 10 ["),o("code",[e._v("VerifyVoteExtension")]),e._v(", determinism-2]: For any two correct processes "),o("em",[e._v("p")]),e._v(" and "),o("em",[e._v("q")]),e._v(",\nand any arbitrary vote extension "),o("em",[e._v("e")]),e._v(", and any arbitrary block "),o("em",[e._v("w")]),e._v(",\nif "),o("em",[e._v("p")]),e._v("'s (resp. "),o("em",[e._v("q")]),e._v("'s) Tendermint calls "),o("code",[e._v("RequestVerifyVoteExtension")]),e._v(" on "),o("em",[e._v("e")]),e._v(" and "),o("em",[e._v("w")]),e._v(" at height "),o("em",[e._v("h")]),e._v(",\nthen "),o("em",[e._v("p")]),e._v("'s Application accepts "),o("em",[e._v("e")]),e._v(" if and only if "),o("em",[e._v("q")]),e._v("'s Application accepts "),o("em",[e._v("e")]),e._v(".\nNote that this requirement follows from Requirement 9 and the Agreement property of consensus.")])])]),e._v(" "),o("p",[e._v("Requirements 9 and 10 ensure that the validation of vote extensions will be deterministic at all\ncorrect processes.\nRequirements 9 and 10 protect against arbitrary vote extension data from Byzantine processes,\nin a similar way as Requirements 6 and 7 protect against arbitrary proposed blocks.\nRequirements 9 and 10 can be violated by a bug inducing non-determinism in\n"),o("code",[e._v("VerifyVoteExtension")]),e._v(". In this case liveness can be compromised.\nExtra care should be put in the implementation of "),o("code",[e._v("ExtendVote")]),e._v(" and "),o("code",[e._v("VerifyVoteExtension")]),e._v(".\nAs a general rule, "),o("code",[e._v("VerifyVoteExtension")]),e._v(" SHOULD always accept the vote extension.")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("Requirement 11 ["),o("em",[e._v("all")]),e._v(", no-side-effects]: "),o("em",[e._v("p")]),e._v("'s calls to "),o("code",[e._v("RequestPrepareProposal")]),e._v(",\n"),o("code",[e._v("RequestProcessProposal")]),e._v(", "),o("code",[e._v("RequestExtendVote")]),e._v(", and "),o("code",[e._v("RequestVerifyVoteExtension")]),e._v(" at height "),o("em",[e._v("h")]),e._v(" do\nnot modify "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Requirement 12 ["),o("code",[e._v("ExtendVote")]),e._v(", "),o("code",[e._v("FinalizeBlock")]),e._v(", non-dependency]: for any correct process "),o("em",[e._v("p")]),e._v(",\nand any vote extension "),o("em",[e._v("e")]),e._v(" that "),o("em",[e._v("p")]),e._v(" received at height "),o("em",[e._v("h")]),e._v(", the computation of\n"),o("em",[e._v("s"),o("sub",[e._v("p,h")])]),e._v(" does not depend on "),o("em",[e._v("e")]),e._v(".")])])]),e._v(" "),o("p",[e._v("The call to correct process "),o("em",[e._v("p")]),e._v("'s "),o("code",[e._v("RequestFinalizeBlock")]),e._v(" at height "),o("em",[e._v("h")]),e._v(", with block "),o("em",[e._v("v"),o("sub",[e._v("p,h")])]),e._v("\npassed as parameter, creates state "),o("em",[e._v("s"),o("sub",[e._v("p,h")])]),e._v(".\nAdditionally,")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("in next-block execution mode, "),o("em",[e._v("p")]),e._v("'s "),o("code",[e._v("FinalizeBlock")]),e._v(" creates a set of transaction results "),o("em",[e._v("T"),o("sub",[e._v("p,h")])]),e._v(",")])]),e._v(" "),o("li",[o("p",[e._v("in same-block execution mode, "),o("em",[e._v("p")]),e._v("'s "),o("code",[e._v("PrepareProposal")]),e._v(" creates a set of transaction results "),o("em",[e._v("T"),o("sub",[e._v("p,h")])]),e._v("\nif "),o("em",[e._v("p")]),e._v(" was the proposer of "),o("em",[e._v("v"),o("sub",[e._v("p,h")])]),e._v(". If "),o("em",[e._v("p")]),e._v(" was not the proposer of "),o("em",[e._v("v"),o("sub",[e._v("p,h")])]),e._v(",\n"),o("code",[e._v("ProcessProposal")]),e._v(" creates "),o("em",[e._v("T"),o("sub",[e._v("p,h")])]),e._v(". "),o("code",[e._v("FinalizeBlock")]),e._v(" MAY re-create "),o("em",[e._v("T"),o("sub",[e._v("p,h")])]),e._v(" if it was\nremoved from memory during the execution of height "),o("em",[e._v("h")]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Requirement 13 ["),o("code",[e._v("FinalizeBlock")]),e._v(", determinism-1]: For any correct process "),o("em",[e._v("p")]),e._v(",\n"),o("em",[e._v("s"),o("sub",[e._v("p,h")])]),e._v(" exclusively depends on "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(" and "),o("em",[e._v("v"),o("sub",[e._v("p,h")])]),e._v(".")])]),e._v(" "),o("li",[o("p",[e._v("Requirement 14 ["),o("code",[e._v("FinalizeBlock")]),e._v(", determinism-2]: For any correct process "),o("em",[e._v("p")]),e._v(",\nthe contents of "),o("em",[e._v("T"),o("sub",[e._v("p,h")])]),e._v(" exclusively depend on "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(" and "),o("em",[e._v("v"),o("sub",[e._v("p,h")])]),e._v(".")])])]),e._v(" "),o("p",[e._v("Note that Requirements 13 and 14, combined with Agreement property of consensus ensure\nstate machine replication, i.e., the Application state evolves consistently at all correct processes.")]),e._v(" "),o("p",[e._v("Finally, notice that neither "),o("code",[e._v("PrepareProposal")]),e._v(" nor "),o("code",[e._v("ExtendVote")]),e._v(" have determinism-related\nrequirements associated.\nIndeed, "),o("code",[e._v("PrepareProposal")]),e._v(" is not required to be deterministic:")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("v'"),o("sub",[e._v("p")])]),e._v(" may depend on "),o("em",[e._v("v"),o("sub",[e._v("p")])]),e._v(" and "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(", but may also depend on other values or operations.")]),e._v(" "),o("li",[o("em",[e._v("v"),o("sub",[e._v("p")]),e._v(" = v"),o("sub",[e._v("q")]),e._v(" ⇏ v'"),o("sub",[e._v("p")]),e._v(" = v'"),o("sub",[e._v("q")])]),e._v(".")])]),e._v(" "),o("p",[e._v("Likewise, "),o("code",[e._v("ExtendVote")]),e._v(" can also be non-deterministic:")]),e._v(" "),o("ul",[o("li",[o("em",[e._v("e"),o("sup",[e._v("r")]),o("sub",[e._v("p")])]),e._v(" may depend on "),o("em",[e._v("w"),o("sup",[e._v("r")]),o("sub",[e._v("p")])]),e._v(" and "),o("em",[e._v("s"),o("sub",[e._v("p,h-1")])]),e._v(",\nbut may also depend on other values or operations.")]),e._v(" "),o("li",[o("em",[e._v("w"),o("sup",[e._v("r")]),o("sub",[e._v("p")]),e._v(" = w"),o("sup",[e._v("r")]),o("sub",[e._v("q")]),e._v(" ⇏\ne"),o("sup",[e._v("r")]),o("sub",[e._v("p")]),e._v(" = e"),o("sup",[e._v("r")]),o("sub",[e._v("q")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);